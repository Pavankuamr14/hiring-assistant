{
    "name": "pavan sai kumar",
    "email": "pavan@gmail.com",
    "phone": "9676405701",
    "experience": "2 years",
    "tech_stack": [
        "python"
    ],
    "submission_time": "2025-04-12 06:36:05",
    "interview_status": "incomplete",
    "technical_responses": {
        "question_1": {
            "question": "1.**(Fundamental) Explain the difference between a list and a tuple in Python.  When would you choose one over the other?**  This tests basic understanding of core data structures and their appropriate use cases.",
            "answer": ""
        },
        "question_2": {
            "question": "2.**(Scenario-based) You have a large text file (e.g., a log file) that you need to process line by line. What is the most efficient way to read this file in Python, minimizing memory usage?**  This explores file handling, efficiency, and understanding of resource management, a common real-world task.",
            "answer": ""
        },
        "question_3": {
            "question": "3.**(Intermediate)  What are decorators in Python, and how can they be used to modify the behavior of functions or methods? Provide a simple example.** This delves into a more advanced Python feature that demonstrates code reusability and metaprogramming concepts.",
            "answer": ""
        },
        "question_4": {
            "question": "4.**(Scenario-based/Intermediate) You're working with a list of dictionaries, where each dictionary represents a user with keys like \"name,\" \"age,\" and \"city.\" How would you sort this list of dictionaries based on the \"age\" key in descending order?** This tests practical application of sorting and working with complex data structures.",
            "answer": ""
        },
        "question_5": {
            "question": "5.**(Advanced/Conceptual)  Explain the concept of generators in Python and their advantages. Provide a use case where a generator would be preferred over a list.** This explores a powerful concept related to memory efficiency and lazy evaluation.  It separates those who have a deeper understanding of Python from those who only know the basics.\n\nPlease provide your answers.",
            "answer": ""
        }
    }
}